Index: src/main/java/org/example/DAOs/CartItemDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/CartItemDAO.java b/src/main/java/org/example/DAOs/CartItemDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/CartItemDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,120 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Cartitem;
-import org.example.entities.CartitemID;  // Make sure the CartItem entity is properly imported
-// Make sure the CartItem entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-import org.example.entities.CartitemId;
-
-public class CartItemDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public CartItemDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createCartItem(Cartitem cartItem){
-        try {
-            em.getTransaction().begin();
-            em.persist(cartItem);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add cart item to the database");
-        }
-    }
-
-    public Cartitem getCartItem(CartitemId cartItemId){
-        Cartitem cartItem = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the cart item by ID
-            cartItem = em.find(Cartitem.class, cartItemId);
-
-            if (cartItem != null) {
-                // Remove the cart item from the database
-                em.remove(cartItem);
-                System.out.println("Cart item with ID " + cartItemId + " was removed.");
-            } else {
-                System.out.println("Cart item with ID " + cartItemId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove cart item from the database");
-        }
-        return cartItem;
-    }
-
-    public void updateCartItem(Cartitem updatedCartItem) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the cart item by ID
-            Cartitem oldCartItem = em.find(Cartitem.class, updatedCartItem.getId());
-
-            if (oldCartItem != null) {
-                // Update the cart item's details
-                oldCartItem.setIdproduct(updatedCartItem.getIdproduct());
-                oldCartItem.setIduser(updatedCartItem.getIduser());
-                oldCartItem.setQuantity(updatedCartItem.getQuantity());
-                // Update other fields as needed
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("Cart item with ID " + updatedCartItem.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update cart item in the database");
-        }
-    }
-
-    public void deleteCartItem(CartitemId cartItemId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the cart item by ID
-            Cartitem cartItem = em.find(Cartitem.class, cartItemId);
-
-            if (cartItem != null) {
-                // Remove the cart item from the database
-                em.remove(cartItem);
-                System.out.println("Cart item with ID " + cartItemId + " has been deleted.");
-            } else {
-                System.out.println("Cart item with ID " + cartItemId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete cart item in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-}
Index: src/main/java/org/example/DAOs/WishlistDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/WishlistDAO.java b/src/main/java/org/example/DAOs/WishlistDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/WishlistDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,117 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Wishlist;  // Make sure the Wishlist entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-import org.example.entities.WishlistId;
-
-public class WishlistDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public WishlistDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createWishlist(Wishlist wishlist){
-        try {
-            em.getTransaction().begin();
-            em.persist(wishlist);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add wishlist to the database");
-        }
-    }
-
-    public Wishlist getWishlist(WishlistId wishlistId){
-        Wishlist wishlist = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the wishlist by ID
-            wishlist = em.find(Wishlist.class, wishlistId);
-
-            if (wishlist != null) {
-                // Remove the wishlist from the database
-                em.remove(wishlist);
-                System.out.println("Wishlist with ID " + wishlistId + " was removed.");
-            } else {
-                System.out.println("Wishlist with ID " + wishlistId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove wishlist from the database");
-        }
-        return wishlist;
-    }
-
-    public void updateWishlist(Wishlist updatedWishlist) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the wishlist by ID
-            Wishlist oldWishlist = em.find(Wishlist.class, updatedWishlist.getId());
-
-            if (oldWishlist != null) {
-                // Update the wishlist's details
-                oldWishlist.setIdproduct(updatedWishlist.getIdproduct());
-                oldWishlist.setIduser(updatedWishlist.getIduser());
-                // Update other fields as needed
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("Wishlist with ID " + updatedWishlist.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update wishlist in the database");
-        }
-    }
-
-    public void deleteWishlist(WishlistId wishlistId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the wishlist by ID
-            Wishlist wishlist = em.find(Wishlist.class, wishlistId);
-
-            if (wishlist != null) {
-                // Remove the wishlist from the database
-                em.remove(wishlist);
-                System.out.println("Wishlist with ID " + wishlistId + " has been deleted.");
-            } else {
-                System.out.println("Wishlist with ID " + wishlistId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete wishlist in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-}
Index: src/main/java/org/example/DAOs/CategoryDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/CategoryDAO.java b/src/main/java/org/example/DAOs/CategoryDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/CategoryDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,115 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Category;  // Make sure the Category entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-
-public class CategoryDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public CategoryDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createCategory(Category category){
-        try {
-            em.getTransaction().begin();
-            em.persist(category);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add category to the database");
-        }
-    }
-
-    public Category getCategory(Integer categoryId){
-        Category category = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the category by ID
-            category = em.find(Category.class, categoryId);
-
-            if (category != null) {
-                // Remove the category from the database
-                em.remove(category);
-                System.out.println("Category with ID " + categoryId + " was removed.");
-            } else {
-                System.out.println("Category with ID " + categoryId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove category from the database");
-        }
-        return category;
-    }
-
-    public void updateCategory(Category updatedCategory) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the category by ID
-            Category oldCategory = em.find(Category.class, updatedCategory.getId());
-
-            if (oldCategory != null) {
-                // Update the category's details
-                oldCategory.setName(updatedCategory.getName());
-                // Update other fields as needed
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("Category with ID " + updatedCategory.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update category in the database");
-        }
-    }
-
-    public void deleteCategory(Integer categoryId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the category by ID
-            Category category = em.find(Category.class, categoryId);
-
-            if (category != null) {
-                // Remove the category from the database
-                em.remove(category);
-                System.out.println("Category with ID " + categoryId + " has been deleted.");
-            } else {
-                System.out.println("Category with ID " + categoryId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete category in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-}
Index: src/main/java/org/example/DAOs/OrderDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/OrderDAO.java b/src/main/java/org/example/DAOs/OrderDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/OrderDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,116 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Order;  // Make sure the Order entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-
-public class OrderDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public OrderDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createOrder(Order order){
-        try {
-            em.getTransaction().begin();
-            em.persist(order);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add order to the database");
-        }
-    }
-
-    public Order getOrder(Integer orderId){
-        Order order = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the order by ID
-            order = em.find(Order.class, orderId);
-
-            if (order != null) {
-                // Remove the order from the database
-                em.remove(order);
-                System.out.println("Order with ID " + orderId + " was removed.");
-            } else {
-                System.out.println("Order with ID " + orderId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove order from the database");
-        }
-        return order;
-    }
-
-    public void updateOrder(Order updatedOrder) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the order by ID
-            Order oldOrder = em.find(Order.class, updatedOrder.getId());
-
-            if (oldOrder != null) {
-                // Update the order's details
-                oldOrder.setDate(updatedOrder.getDate());
-                oldOrder.setIduser(updatedOrder.getIduser());
-                // Update other fields as needed
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("Order with ID " + updatedOrder.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update order in the database");
-        }
-    }
-
-    public void deleteOrder(Integer orderId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the order by ID
-            Order order = em.find(Order.class, orderId);
-
-            if (order != null) {
-                // Remove the order from the database
-                em.remove(order);
-                System.out.println("Order with ID " + orderId + " has been deleted.");
-            } else {
-                System.out.println("Order with ID " + orderId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete order in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-}
Index: src/main/java/org/example/DAOs/EntityManagerFactorySinglton.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/EntityManagerFactorySinglton.java b/src/main/java/org/example/DAOs/EntityManagerFactorySinglton.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/EntityManagerFactorySinglton.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,15 +0,0 @@
-package org.example.DAOs;
-
-import jakarta.persistence.EntityManagerFactory;
-import jakarta.persistence.Persistence;
-
-public class EntityManagerFactorySinglton {
-    private static EntityManagerFactory emf;
-
-    public synchronized EntityManagerFactory getEntityManagerFactory(){
-        if(emf == null){
-            return emf = Persistence.createEntityManagerFactory("noura");
-        }
-        return emf;
-    }
-}
Index: src/main/java/org/example/DAOs/UserDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/UserDAO.java b/src/main/java/org/example/DAOs/UserDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/UserDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,125 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.*;
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-
-public class UserDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public UserDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createUser(User user){
-        try{
-            em.getTransaction().begin();
-            em.persist(user);
-            em.getTransaction().commit();
-        }
-        catch(Exception e){
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add user to the database");
-        }
-    }
-
-    public User getUser(Integer userId){
-        User user = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the user by ID
-            user = em.find(User.class, userId);
-
-            if (user != null) {
-                // Remove the user from the database
-                em.remove(user);
-                System.out.println("User with ID " + userId + " was removed.");
-            } else {
-                System.out.println("User with ID " + userId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        }
-        catch(Exception e){
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove user to the database");
-        }
-        return user;
-    }
-
-    public void updateUser(User updatedUser) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the user by ID
-            User oldUser = em.find(User.class, updatedUser.getId());
-
-            if (oldUser != null) {
-                // Update the user's details
-                oldUser.setCity(updatedUser.getCity());
-                oldUser.setCredit(updatedUser.getCredit());
-                oldUser.setEmail(updatedUser.getEmail());
-                oldUser.setName(updatedUser.getName());
-                oldUser.setJob(updatedUser.getJob());
-                oldUser.setStreet(updatedUser.getStreet());
-                oldUser.setPassword(updatedUser.getPassword());
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("User with ID " + updatedUser.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        }
-        catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update user to the database");
-        }
-    }
-
-    public void deleteUser(Integer userId) {
-
-        try {
-            em.getTransaction().begin();
-
-            // Find the user by ID
-            User user = em.find(User.class, userId);
-
-            if (user != null) {
-                // Remove the user from the database
-                em.remove(user);
-                System.out.println("User with ID " + userId + " has been deleted.");
-            } else {
-                System.out.println("User with ID " + userId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete user to the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-
-}
Index: src/main/java/org/example/DAOs/AdminDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/AdminDAO.java b/src/main/java/org/example/DAOs/AdminDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/AdminDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,116 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Admin;  // Make sure the Admin entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-
-public class AdminDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public AdminDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createAdmin(Admin admin){
-        try {
-            em.getTransaction().begin();
-            em.persist(admin);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add admin to the database");
-        }
-    }
-
-    public Admin getAdmin(Integer adminId){
-        Admin admin = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the admin by ID
-            admin = em.find(Admin.class, adminId);
-
-            if (admin != null) {
-                // Remove the admin from the database
-                em.remove(admin);
-                System.out.println("Admin with ID " + adminId + " was removed.");
-            } else {
-                System.out.println("Admin with ID " + adminId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove admin from the database");
-        }
-        return admin;
-    }
-
-    public void updateAdmin(Admin updatedAdmin) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the admin by ID
-            Admin oldAdmin = em.find(Admin.class, updatedAdmin.getId());
-
-            if (oldAdmin != null) {
-                // Update the admin's details
-                oldAdmin.setEmail(updatedAdmin.getEmail());
-                oldAdmin.setPassword(updatedAdmin.getPassword());
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("Admin with ID " + updatedAdmin.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update admin in the database");
-        }
-    }
-
-    public void deleteAdmin(Integer adminId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the admin by ID
-            Admin admin = em.find(Admin.class, adminId);
-
-            if (admin != null) {
-                // Remove the admin from the database
-                em.remove(admin);
-                System.out.println("Admin with ID " + adminId + " has been deleted.");
-            } else {
-                System.out.println("Admin with ID " + adminId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete admin in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-
-}
Index: src/main/java/org/example/DAOs/OrderItemDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/OrderItemDAO.java b/src/main/java/org/example/DAOs/OrderItemDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/OrderItemDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,119 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Orderitem;
-import org.example.entities.OrderitemId; // Make sure the OrderItem entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-
-public class OrderItemDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public OrderItemDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createOrderItem(Orderitem orderItem){
-        try {
-            em.getTransaction().begin();
-            em.persist(orderItem);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add order item to the database");
-        }
-    }
-
-    public Orderitem getOrderItem(OrderitemId orderItemId){
-        Orderitem orderItem = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the order item by ID
-            orderItem = em.find(Orderitem.class, orderItemId);
-
-            if (orderItem != null) {
-                // Remove the order item from the database
-                em.remove(orderItem);
-                System.out.println("Order item with ID " + orderItemId + " was removed.");
-            } else {
-                System.out.println("Order item with ID " + orderItemId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove order item from the database");
-        }
-        return orderItem;
-    }
-
-    public void updateOrderItem(Orderitem updatedOrderItem) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the order item by ID
-            Orderitem oldOrderItem = em.find(Orderitem.class, updatedOrderItem.getId());
-
-            if (oldOrderItem != null) {
-                // Update the order item's details
-                oldOrderItem.setIdorder(updatedOrderItem.getIdorder());
-                oldOrderItem.setQuantity(updatedOrderItem.getQuantity());
-                oldOrderItem.setPrice(updatedOrderItem.getPrice());
-                oldOrderItem.setIdproduct(updatedOrderItem.getIdproduct());
-                // Update other fields as needed
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("Order item with ID " + updatedOrderItem.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update order item in the database");
-        }
-    }
-
-    public void deleteOrderItem(OrderitemId orderItemId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the order item by ID
-            Orderitem orderItem = em.find(Orderitem.class, orderItemId);
-
-            if (orderItem != null) {
-                // Remove the order item from the database
-                em.remove(orderItem);
-                System.out.println("Order item with ID " + orderItemId + " has been deleted.");
-            } else {
-                System.out.println("Order item with ID " + orderItemId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete order item in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-}
\ No newline at end of file
Index: src/main/java/org/example/DAOs/ProductDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/ProductDAO.java b/src/main/java/org/example/DAOs/ProductDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/ProductDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,123 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Product;  // Make sure the Product entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-
-public class ProductDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public ProductDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createProduct(Product product){
-        try {
-            em.getTransaction().begin();
-            em.persist(product);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add product to the database");
-        }
-    }
-
-    public Product getProduct(Integer productId){
-        Product product = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the product by ID
-            product = em.find(Product.class, productId);
-
-            if (product != null) {
-                // Remove the product from the database
-                em.remove(product);
-                System.out.println("Product with ID " + productId + " was removed.");
-            } else {
-                System.out.println("Product with ID " + productId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove product from the database");
-        }
-        return product;
-    }
-
-    public void updateProduct(Product updatedProduct) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the product by ID
-            Product oldProduct = em.find(Product.class, updatedProduct.getId());
-
-            if (oldProduct != null) {
-                // Update the product's details
-                oldProduct.setName(updatedProduct.getName());
-                oldProduct.setDescription(updatedProduct.getDescription());
-                oldProduct.setPrice(updatedProduct.getPrice());
-                oldProduct.setImg(updatedProduct.getImg());
-                oldProduct.setCc(updatedProduct.getCc());
-                oldProduct.setColor(updatedProduct.getColor());
-                oldProduct.setIdcategory(updatedProduct.getIdcategory());
-                oldProduct.setQuantity(updatedProduct.getQuantity());
-                oldProduct.setModel(updatedProduct.getModel());
-                // Update other fields as needed
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("Product with ID " + updatedProduct.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update product in the database");
-        }
-    }
-
-    public void deleteProduct(Integer productId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the product by ID
-            Product product = em.find(Product.class, productId);
-
-            if (product != null) {
-                // Remove the product from the database
-                em.remove(product);
-                System.out.println("Product with ID " + productId + " has been deleted.");
-            } else {
-                System.out.println("Product with ID " + productId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete product in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-}
Index: src/main/java/org/example/DAOs/UserInterestDAO.java
===================================================================
diff --git a/src/main/java/org/example/DAOs/UserInterestDAO.java b/src/main/java/org/example/DAOs/UserInterestDAO.java
deleted file mode 100644
--- a/src/main/java/org/example/DAOs/UserInterestDAO.java	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ /dev/null	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
@@ -1,117 +0,0 @@
-package org.example.DAOs;
-
-import org.example.entities.Userinterest;  // Make sure the UserInterest entity is properly imported
-import jakarta.persistence.EntityManager;
-import jakarta.persistence.EntityManagerFactory;
-import org.example.entities.UserinterestId;
-
-public class UserInterestDAO {
-
-    private final EntityManagerFactory emf;
-    private final EntityManager em;
-
-    public UserInterestDAO(){
-        this.emf = new EntityManagerFactorySinglton().getEntityManagerFactory();
-        em = emf.createEntityManager();
-    }
-
-    public void createUserInterest(Userinterest userInterest){
-        try {
-            em.getTransaction().begin();
-            em.persist(userInterest);
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to add user interest to the database");
-        }
-    }
-
-    public Userinterest getUserInterest(UserinterestId userInterestId){
-        Userinterest userInterest = null;
-        try {
-            em.getTransaction().begin();
-
-            // Find the user interest by ID
-            userInterest = em.find(Userinterest.class, userInterestId);
-
-            if (userInterest != null) {
-                // Remove the user interest from the database
-                em.remove(userInterest);
-                System.out.println("User interest with ID " + userInterestId + " was removed.");
-            } else {
-                System.out.println("User interest with ID " + userInterestId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch(Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to remove user interest from the database");
-        }
-        return userInterest;
-    }
-
-    public void updateUserInterest(Userinterest updatedUserInterest) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the user interest by ID
-            Userinterest oldUserInterest = em.find(Userinterest.class, updatedUserInterest.getId());
-
-            if (oldUserInterest != null) {
-                // Update the user interest's details
-                oldUserInterest.setIdcategory(updatedUserInterest.getIdcategory());
-                oldUserInterest.setIduser(updatedUserInterest.getIduser());
-                // Update other fields as needed
-
-                // The changes are automatically tracked and updated in the database upon commit
-            } else {
-                if (em.getTransaction().isActive()) {
-                    em.getTransaction().rollback();
-                }
-                System.out.println("User interest with ID " + updatedUserInterest.getId() + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to update user interest in the database");
-        }
-    }
-
-    public void deleteUserInterest(UserinterestId userInterestId) {
-        try {
-            em.getTransaction().begin();
-
-            // Find the user interest by ID
-            Userinterest userInterest = em.find(Userinterest.class, userInterestId);
-
-            if (userInterest != null) {
-                // Remove the user interest from the database
-                em.remove(userInterest);
-                System.out.println("User interest with ID " + userInterestId + " has been deleted.");
-            } else {
-                System.out.println("User interest with ID " + userInterestId + " not found.");
-            }
-
-            em.getTransaction().commit();
-        } catch (Exception e) {
-            if (em.getTransaction().isActive()) {
-                em.getTransaction().rollback();
-            }
-            System.out.println("Failed to delete user interest in the database");
-        } finally {
-            em.close();
-        }
-    }
-
-    public void closeDAOResources(){
-        em.close();
-        emf.close();
-    }
-}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8ad82611-6c78-4a6e-b095-e6ab2c3a405d\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/uiDesigner.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/CartItemDAO.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/CategoryDAO.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/EntityManagerFactorySinglton.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderDAO.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderItemDAO.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/ProductDAO.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/UserDAO.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/UserInterestDAO.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/WishlistDAO.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/user.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/DAOs/AdminDAO.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"com.intellij.jpb.JpaEntity\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <favorite-branches>\r\n      <branch-storage>\r\n        <map>\r\n          <entry type=\"LOCAL\">\r\n            <value>\r\n              <list>\r\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"nourhan\" />\r\n                <branch-info repo=\"$PROJECT_DIR$/..\" source=\"nourhan\" />\r\n              </list>\r\n            </value>\r\n          </entry>\r\n        </map>\r\n      </branch-storage>\r\n    </favorite-branches>\r\n    <option name=\"RECENT_COMMON_BRANCH\" value=\"nourhan\" />\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"SYNC\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;nourhan1998-n&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/nourhan1998-n/PotatoesWebsite.git&quot;,\r\n    &quot;accountId&quot;: &quot;0857dea9-8c6f-462e-b729-c3ffbec91dd4&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2l1dxb7uUvQfWfUhOE1DcR1UcuO\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;JUnit.CartUserRelationshipTest.executor&quot;: &quot;Debug&quot;,\r\n    &quot;JUnit.CartUserRelationshipTest.testCartUserRelationship.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;DAO&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;E:/ITI JAVA/webProject/PotatoesWebsite/src/main/resources&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;onboarding.tips.debug.path&quot;: &quot;E:/ITI JAVA/webProject/PotatoesWebsite/PotatoesWebsite/src/main/java/org/example/Main.java&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;application.passwordSafe&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mysql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\ITI JAVA\\webProject\\PotatoesWebsite\\src\\main\\resources\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.CartUserRelationshipTest\">\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CartUserRelationshipTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"PotatoesWebsite\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"CartUserRelationshipTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CartUserRelationshipTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"PotatoesWebsite\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"CartUserRelationshipTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CartUserRelationshipTest.testCartUserRelationship\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"PotatoesWebsite\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"CartUserRelationshipTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testCartUserRelationship\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CartUserRelationshipTest.testCartUserRelationship\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"PotatoesWebsite\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"CartUserRelationshipTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testCartUserRelationship\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.CartUserRelationshipTest.testCartUserRelationship\" />\r\n        <item itemvalue=\"JUnit.CartUserRelationshipTest\" />\r\n        <item itemvalue=\"JUnit.CartUserRelationshipTest.testCartUserRelationship\" />\r\n        <item itemvalue=\"JUnit.CartUserRelationshipTest\" />\r\n        <item itemvalue=\"JUnit.CartUserRelationshipTest.testCartUserRelationship\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8ad82611-6c78-4a6e-b095-e6ab2c3a405d\" name=\"Changes\" comment=\"\" />\r\n      <created>1724351767180</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1724351767180</updated>\r\n      <workItem from=\"1724351767641\" duration=\"139000\" />\r\n      <workItem from=\"1724352141714\" duration=\"5659000\" />\r\n      <workItem from=\"1724413082251\" duration=\"1437000\" />\r\n      <workItem from=\"1724441968222\" duration=\"2059000\" />\r\n      <workItem from=\"1724499083825\" duration=\"6977000\" />\r\n      <workItem from=\"1724596806686\" duration=\"2247000\" />\r\n      <workItem from=\"1724604777318\" duration=\"833000\" />\r\n      <workItem from=\"1724693761446\" duration=\"2176000\" />\r\n      <workItem from=\"1724761460555\" duration=\"353000\" />\r\n      <workItem from=\"1724951980609\" duration=\"590000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"nourhan\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 38b3028f592c662717d9e1620372fa031cedeb7f)
+++ b/.idea/workspace.xml	(date 1725027894868)
@@ -5,18 +5,89 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="8ad82611-6c78-4a6e-b095-e6ab2c3a405d" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/uiDesigner.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/CartItemDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/CategoryDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/EntityManagerFactorySinglton.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderItemDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/ProductDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/UserDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/UserInterestDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/WishlistDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../.gitignore" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../README.md" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/user.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/AdminDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/AdminDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/AdminDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/CartItemDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/CartItemDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/CategoryDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/CategoryDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/GenericDAOImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/GenericDAOImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderItemDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/OrderItemDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/ProductDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/ProductDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/UserDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/UserDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/UserInterestDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/UserInterestDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/DAOs/WishlistDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/DAOs/WishlistDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/META-INF/Persistence.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/META-INF/Persistence.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/jacoco.exec" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/maven-archiver/pom.properties" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/index.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/branchfc.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/branchnc.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/branchpc.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/bundle.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/class.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/down.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/greenbar.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/group.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/method.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/package.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/prettify.css" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/prettify.js" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/redbar.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/report.css" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/report.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/session.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/sort.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/sort.js" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/source.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-resources/up.gif" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-sessions.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco.csv" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Admin.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Admin.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Cartitem.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Cartitem.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/CartitemId.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/CartitemId.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Category.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Category.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Interest.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Interest.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Order.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Order.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Orderitem.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Orderitem.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/OrderitemId.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/OrderitemId.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Product.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Product.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Productcategory.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Productcategory.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/ProductcategoryId.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/ProductcategoryId.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/User.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/User.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Userinterest.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Userinterest.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/UserinterestId.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/UserinterestId.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Wishlist.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Wishlist.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Wishlistitem.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/Wishlistitem.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/WishlistitemId.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/WishlistitemId.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/index.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example.entities/index.source.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example/Main.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example/Main.java.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example/index.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/site/jacoco/org.example/index.source.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/surefire-reports/2024-08-26T19-55-54_997.dumpstream" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/surefire-reports/CartUserRelationshipTest.txt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/surefire-reports/TEST-CartUserRelationshipTest.xml" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -28,6 +99,7 @@
       <list>
         <option value="com.intellij.jpb.JpaEntity" />
         <option value="Class" />
+        <option value="Interface" />
       </list>
     </option>
   </component>
@@ -46,6 +118,11 @@
         </map>
       </branch-storage>
     </favorite-branches>
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="DAO" />
+      </map>
+    </option>
     <option name="RECENT_COMMON_BRANCH" value="nourhan" />
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
     <option name="ROOT_SYNC" value="SYNC" />
@@ -70,39 +147,40 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;JUnit.CartUserRelationshipTest.executor&quot;: &quot;Debug&quot;,
-    &quot;JUnit.CartUserRelationshipTest.testCartUserRelationship.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;DAO&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;E:/ITI JAVA/webProject/PotatoesWebsite/src/main/resources&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;onboarding.tips.debug.path&quot;: &quot;E:/ITI JAVA/webProject/PotatoesWebsite/PotatoesWebsite/src/main/java/org/example/Main.java&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;application.passwordSafe&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.UserDAO.executor": "Run",
+    "JUnit.CartUserRelationshipTest.executor": "Run",
+    "JUnit.CartUserRelationshipTest.testCartUserRelationship.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "DAO-v2",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "E:/ITI JAVA/webProject/PotatoesWebsite/src/main/resources",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "onboarding.tips.debug.path": "E:/ITI JAVA/webProject/PotatoesWebsite/PotatoesWebsite/src/main/java/org/example/Main.java",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.2",
+    "settings.editor.selected.configurable": "application.passwordSafe",
+    "vue.rearranger.settings.migration": "true"
   },
-  &quot;keyToStringList&quot;: {
-    &quot;DatabaseDriversLRU&quot;: [
-      &quot;mysql&quot;
+  "keyToStringList": {
+    "DatabaseDriversLRU": [
+      "mysql"
     ]
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="E:\ITI JAVA\webProject\PotatoesWebsite\src\main\resources" />
     </key>
   </component>
-  <component name="RunManager" selected="JUnit.CartUserRelationshipTest">
+  <component name="RunManager" selected="Application.UserDAO">
     <configuration default="true" type="JetRunConfigurationType">
       <method v="2">
         <option name="Make" enabled="true" />
@@ -110,6 +188,19 @@
     </configuration>
     <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
       <option name="filePath" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="UserDAO" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="org.example.DAOs.UserDAO" />
+      <module name="PotatoesWebsite" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="org.example.DAOs.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -165,11 +256,11 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="JUnit.CartUserRelationshipTest.testCartUserRelationship" />
+        <item itemvalue="Application.UserDAO" />
         <item itemvalue="JUnit.CartUserRelationshipTest" />
         <item itemvalue="JUnit.CartUserRelationshipTest.testCartUserRelationship" />
+        <item itemvalue="JUnit.CartUserRelationshipTest.testCartUserRelationship" />
         <item itemvalue="JUnit.CartUserRelationshipTest" />
-        <item itemvalue="JUnit.CartUserRelationshipTest.testCartUserRelationship" />
       </list>
     </recent_temporary>
   </component>
